# EWAS of treatment response: The code is in our GitHub repository 
# (https://github.com/PGC-PTSD-EWAS/PGC-PTSD-Longitudinal-Analysis). The name of the script is Model2.R.
################################################################################
# Model 2: Linear model to evaluate CpGs associated with whether patients reponsed to treatment (Response vs Nonreponse) .
# This is a categorical model 
################################################################################
library(lme4)
library(lmerTest)
library(data.table)
library(tidyverse)

#gc()

setwd("/Volumes/som-ts/GynOb/SmithLab/NewData/People/Dasia/EVP/EWAS_TreatmentResponse_EVP_Step4/")
# Scale pheno
pheno <- read.csv("wideformat_withCellcompANDancestryPCs_EVP_nov4_2024.csv")
pheno <- pheno[, -1]
########### getting sex column 
#print(colnames(pheno))

pheno2 <-read.csv("phenoUSEthis.csv")
# Merge the two datasets based on the "SID" column
pheno <- merge(pheno, pheno2[, c("SID", "Sex")], by = "SID", all.x = TRUE)
# Keep only rows with odd row numbers
pheno <- pheno[seq(1, nrow(pheno), by = 2), ]
rm(pheno2)


############################################################
# Data formatting from long to wide if havent done already 
############################################################
# Add a column named "measurement" and put pre and post in the rows according to pcl score 
#pheno$Measurement <- ifelse(grepl("pre", pheno$SampleNum), "pre", "post")

# PUT DATA in wide format to do EWAS for treatment 
# Pivot the data to convert from long to wide format, using 'SID' to uniquely identify each individual
#wide_data3 <- pheno %>%
#  pivot_wider(
#    id_cols = SID,  # Use 'SID' as the unique identifier
#    names_from = Measurement,  # Use 'Measurement' to create 'pre' and 'post' columns
#    values_from = c(SampleID, Age, PCL_Baseline, PCL_Completion,CD8T, CD4T, NK, Bcell, Mono, Neu)  # Values to spread into wide format
#  )

# Remove unnecessary rows 
#wide_data3 <- wide_data3 %>% select(-PCL_Baseline_post, -PCL_Completion_pre)
#make a column with header studyid and EVP in its rows
#wide_data3$`studyID` <- "EVP"
#write.csv(wide_data3, file = "EVP_formatDYS.csv")


############################################################
############################################################


#pheno$PCL_SUM_01scaled <- (pheno$PCL_SUM-min(pheno$PCL_SUM))/(max(pheno$PCL_SUM)-min(pheno$PCL_SUM))

# read in beta values that have already by normalized for batch effects (combat)
# Load beta matrix 
beta.norm<-fread("EVP_combat_CP_wcovar_age_pcl_sex_103124.csv",data.table = F) # loading beta values, CpG X Sample
rownames(beta.norm)<-beta.norm$V1
beta.norm<-beta.norm[,-1]

############################################################
# Define Variables
############################################################

ageVar<-"AgeDiff" # Age variable = Age.post - Age.pre
#calculate age difference
ageDiff <-pheno$Age_post - pheno$Age_pre 

# Define the cell type pairs for calculating differences
cellTypes <- c("CD8T", "CD4T", "NK", "Bcell", "Mono", "Neu")  # List of cell types
# Loop through each cell type to calculate the difference between post and pre values
for (cellType in cellTypes) {
  pre_col <- paste0(cellType, "_pre")  # Pre column name
  post_col <- paste0(cellType, "_post")  # Post column name
  diff_col <- paste0(cellType, ".Epic.diff")  # Difference column name
  # Calculate the difference and add it as a new column in the dataframe
  pheno[[diff_col]] <- pheno[[post_col]] - pheno[[pre_col]]
}
# Cell type variables, difference in cell proportions between two time points
cellTypes<-c("CD8T.Epic.diff","CD4T.Epic.diff","NK.Epic.diff","Bcell.Epic.diff","Mono.Epic.diff")

# PTSD variable - calculate difference between PCL completion and baseline
ptsdVar <- "PTSD_Diff"
ptsdDiff <- pheno$PCL_Completion_post - pheno$PCL_Baseline_pre  # Calculate PTSD difference

# Assigning the computed differences back to the dataframe
pheno[[ageVar]] <- ageDiff
pheno[[ptsdVar]] <- ptsdDiff

pcs<-c("Comp.1_pre","Comp.2_pre")  # Ancestry PC variables # change 



studyID <-"EVP" # E.g. "MRS","Prismo"

# Ensure SampleID columns are characters (if needed)
pheno$SampleID_pre<-as.character(pheno$SampleID_pre)
pheno$SampleID_post<-as.character(pheno$SampleID_post)

############################################################
# Figuring out does the phenotype file match the beta/cpg file 
############################################################

all(pheno$SampleID_pre%in%colnames(beta.norm))  # Should be TRUE
all(pheno$SampleID_post%in%colnames(beta.norm)) # Should be TRUE

# If FALSE FIGURE OUT WHY 
# Find unique SampleID_pre values that are not in beta.norm column names
unique_pre <-setdiff(pheno$SampleID_pre, colnames(beta.norm))
# Find unique SampleID_pre values that are not in beta.norm column names
unique_post <-setdiff(pheno$SampleID_post, colnames(beta.norm))

# Filter the wide_data3 dataframe for these unique SampleID_pre and SampleID_post values
unique_pre_data <- pheno[pheno$SampleID_pre %in% unique_pre, ]
unique_post_data <- pheno[pheno$SampleID_post %in% unique_post, ]

# Display the unique values
print("Unique SampleID_pre values not in beta.norm:")
print(unique_pre)

print("Unique SampleID_post values not in beta.norm:")
print(unique_post)


# Filter wide_data3 to keep only rows where SampleID_pre and SampleID_post are in beta.norm column names
pheno_mod <- pheno[
  pheno$SampleID_pre %in% colnames(beta.norm) & 
    pheno$SampleID_post %in% colnames(beta.norm), 
]

pheno_mod$Sex <- as.factor(pheno_mod$Sex)

# Check again should say TRUE
all(pheno_mod$SampleID_pre%in%colnames(beta.norm))  # Should be TRUE
all(pheno_mod$SampleID_post%in%colnames(beta.norm)) # Should be TRUE


############################################################
############################################################

# Converting to M-values
range(beta.norm, na.rm=T)

# Changing beta values of 0 to 0.0001
if(min(beta.norm, na.rm=T)==0){
  beta.norm[which(beta.norm==0)]<-0.0001
}

# Changing beta values of 1 to 0.9999
if(max(beta.norm, na.rm=T)==1){
  beta.norm[which(beta.norm==1)]<-0.9999
}

range(beta.norm, na.rm=T)
sum(is.na(beta.norm))

# Convert to Mvalues using log2
beta.norm<-log2(beta.norm/(1-beta.norm)) # log transforming
range(beta.norm, na.rm=T)

# with pcs 
#formula<-as.formula(paste("outCpG~", 
#                          paste(c("expCpG", ptsdVar, ageVar, cellTypes, pcs), collapse="+"),
#                          sep=""))

# with sex and pcs 
formula <- as.formula(
  paste("outCpG ~", 
        paste(c("expCpG", ptsdVar, ageVar, paste(cellTypes, collapse = "+"), paste(pcs, collapse = "+"), "Sex"), 
              collapse = " + "))
)


# without pcs
#formula<-as.formula(paste("outCpG~", 
#                          paste(c("expCpG", ptsdVar, ageVar, cellTypes), collapse="+"), 
#                          sep=""))
print(formula)
# with pcs and sex 
vars<-c("(Intercept)", "expCpG", ptsdVar, ageVar, cellTypes, pcs, "Sex")

# without pcs
#vars<-c("(Intercept)", "expCpG", ptsdVar, ageVar, cellTypes)

#  Creates a matrix to store the beta coefficients (effect sizes) for each variable in the model, for each CpG site.
resultsBeta<-matrix(nrow=nrow(beta.norm), ncol=length(vars))
rownames(resultsBeta)<-rownames(beta.norm)
colnames(resultsBeta)<-vars
resultsSE<-resultsT<-resultsP<-resultsBeta #T-statistics for the beta coefficients #Standard errors of the beta coefficients. P-values for the beta coefficients
resultsDF<-matrix(nrow = nrow(beta.norm),ncol = 1) # residual degrees of freedom (DF) for each CpG site after fitting the model
rownames(resultsDF)<-rownames(beta.norm)
colnames(resultsDF)<-"df"

cpgs<-rownames(beta.norm) # Store CpG Names
errorProbes<-NULL

start<-proc.time()[3]
for(ii in 1:length(cpgs)){
  tempPheno<-pheno_mod
  outCpG<-t(beta.norm[cpgs[ii], pheno_mod$SampleID_post])
  expCpG<-t(beta.norm[cpgs[ii], pheno_mod$SampleID_pre])
  fit<-lm(formula, data=tempPheno)
  res<-coef(summary(fit))
  resultsBeta[ii,]<-res[, "Estimate"]
  resultsSE[ii,]<-res[, "Std. Error"]
  resultsT[ii,]<-res[, "t value"]
  resultsP[ii,]<-res[, "Pr(>|t|)"]
  resultsDF[ii,]<-fit$df.residual
  if(ii%%100==0){print(ii)}
}
end<-proc.time()[3]
end-start

beta<-as.data.frame(resultsBeta)
pval<-as.data.frame(resultsP)
se<-as.data.frame(resultsSE)
t<-as.data.frame(resultsT)


final<-as.data.frame(cbind(beta[ptsdVar],se[ptsdVar],t[ptsdVar],pval[ptsdVar],resultsDF))
rownames(final)<-rownames(beta)
colnames(final)<-c("BETA","SE","t","pval","df")

write.csv(final,file = paste0(studyID,"EVPtreatmentreponseEWAS_WITH_AncestryPCs_withsex.csv"),quote = F,row.names = T)


